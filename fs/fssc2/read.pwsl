// FSSC2 - read
//
//    Copyright (C) 2021  adazem009
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
linkdef/"_ls","ls","global"
{
	warp
		// _ls/[path],[fs image]/[output list - types],[output list - names],[output list - data],[output list - permissions],[output list - owners],[output list - groups],[output list - attributes]
		getitem/"arg_1",1/"path"
		getitem/"arg_1",2/"fs"
		getitem/"arg_2",1/"olt"
		getitem/"arg_2",2/"oln"
		getitem/"arg_2",3/"old"
		getitem/"arg_2",4/"olp"
		getitem/"arg_2",5/"olo"
		getitem/"arg_2",6/"olg"
		getitem/"arg_2",7/"ola"
		setlist/olt,oln,old,olp,olo,olg,ola
		// Convert binary
		bintolist/fs/"fsl"
		getlistlength/"fsl"/"fsll"
		set/"i",1/"loop",1
		//      ^ This is 1 because the first item is the filesystem format (FSSC2 in this case)
		while/[i < fsll]
			if/[loop == 1]
				// Definition path
				calc/"i=i+1"
				getitem/"fsl",i/"def"
				//print/"def=",def,\n
				// Number of files
				calc/"i=i+1"
				getitem/"fsl",i/"c"
				//print/"c=",c,\n
				if/[c > 0]
					set/"loop",0/"ci",0
				endif
			else
				// Get files under current definition
				calc/"ci=ci+1"
				// Type - file or folder
				calc/"i=i+1"
				getitem/"fsl",i/"ft"
				// File name
				calc/"i=i+1"
				getitem/"fsl",i/"fn"
				//print/fn,\n
				// File data
				calc/"i=i+1"
				getitem/"fsl",i/"fd"
				// File permissions
				calc/"i=i+1"
				getitem/"fsl",i/"fp"
				// File owner
				calc/"i=i+1"
				getitem/"fsl",i/"fo"
				// File group
				calc/"i=i+1"
				getitem/"fsl",i/"fg"
				// File attributes
				calc/"i=i+1"
				getitem/"fsl",i/"fa"
				if/[def == path]
					append/ft/olt
					append/fn/oln
					append/fd/old
					append/fp/olp
					append/fo/olo
					append/fg/olg
					append/fa/ola
				endif
				if/[ci >= c]
					set/"loop",1
				endif
			endif
		endloop
	endwarp
}
linkdef/"readfile","rfile","global"
{
	// readfile/[path]/[output variable (string)]
	getitem/"arg_1",1/"in"
	getitem/"arg_2",1/"inout"
	_fixpath/in/"path"
	// The last item is our file name
	getlistlength/"parts"/"len"
	getitem/"parts",len/"gname"
	set/"path",in,"/.."
	// ^ This will make _fixpath ignore the last part of the path
	_fixpath/path/"path"
	if/[pseudo == ""]
		set/"fs",$rootfs/"tmppt",path
	else
		readvar/pseudo/"fs"
		set/"tmppt",pseudo_path
	endif
	_ls/tmppt,fs/"ftypes","fnames","fdata","fperms","fowns","fgroups","fattr"
	getindex/"fnames",gname/"ix"
	getitem/"fdata",ix/"file"
	if/[pseudo != ""] and [pseudo != "mntfsbin"]
		set/"filen",file
		set/"file",""
		bintolist/filen/"filel"
		getitem/"filel",1/"tmp"
		deleteitem/1/"filel"
		listtobin/"filel"/"filen"
		set/"tmp",tmp,"_read"
		readvar/tmp/"tmp"
		source/tmp/0/filen
	endif
	set/inout,file
}
