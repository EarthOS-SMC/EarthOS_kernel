// EarthOS kernel - filesystem mount tools
//
//    Copyright (C) 2021  adazem009
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
linkdef/"_mount_fs","mnt_fs","global"
{
	warp
		// _mount_fs/[path to filesystem],[path to mount point],[mode (ro/rw)],[type (mount/pseudo)]
		getitem/"arg_1",1/"mntfs"
		getitem/"arg_1",2/"mntpnt"
		getitem/"arg_1",3/"mntmd"
		getitem/"arg_1",4/"mnttp"
		// Check permissions
		if/[whoami != "root"]
			set/"return_code","EPERM"
			exit
		endif
		// Translate to absolute paths
		if/[mnttp != "pseudo"]
			_fixpath/mntfs/"mntfs"
		endif
		_fixpath/mntpnt/"mntpnt"
		// Filesystem permission checks
		set/"return_code",""
		if/[mnttp != "pseudo"]
			if/[mntpnt == "/"] and [whoami != "root"]
				// Only root can mount root fs
				set/"return_code","EACCES"
				exit
			endif
			if/[mntmd == "ro"]
				source/$tmp_lib_ftest/mntfs,"r","f"/"test"
			else
				if/[mntmd == "rw"]
					if/[mntpnt != "/"]
						source/$tmp_lib_ftest/mntfs,"rw","f"/"test"
					endif
				else
					set/"return_code","EINVAL"
				endif
			endif
			if/[return_code != ""]
				exit
			endif
		endif
		// Mount point permission checks
		if/[mntpnt != "/"]
			source/$tmp_lib_ftest/mntpnt,"r","d"/"test"
			if/[mnttp == "pseudo"] and [return_code == "EACCES"]
				set/"return_code",""
			endif
			if/[return_code != ""]
				exit
			endif
		endif
		// Load mount lists
		bintolist/$mount_fs/"mount_fs"
		bintolist/$mount_pnt/"mount_pnt"
		bintolist/$mount_fsi/"mount_fsi"
		bintolist/$mount_md/"mount_md"
		// Check filesystem availability
		if/[mnttp != "pseudo"]
			getindex/"mount_fs",mntfs/"ix"
			if/[ix != 0]
				set/"return_code","EBUSY"
				exit
			endif
		endif
		// Check mount point availability
		getindex/"mount_pnt",mntpnt/"ix"
		if/[ix != 0]
			set/"return_code","EBUSY"
			exit
		endif
		// Create mount
		append/mntfs/"mount_fs"
		append/mntpnt/"mount_pnt"
		append/mntmd/"mount_md"
		// Read filesystem file
		if/[mnttp == "pseudo"]
			append/""/"mount_fsi"
		else
			source/$tmp_lib_rfile/mntfs/"file"
			append/file/"mount_fsi"
		endif
		if/[mntpnt == "/"]
			set/"$rootfs",file/"$rootpath",mntfs
		endif
		// Load pseudo fs lists
		bintolist/$pseudo_fs/"pseudo_fs"
		bintolist/$pseudo_fs_name/"pseudo_fs_name"
		bintolist/$pseudo_fs_arg/"pseudo_fs_arg"
		// Create pseudo fs
		// It's not needed for root fs
		if/[mntpnt != "/"] and [mnttp != "pseudo"]
			append/mntpnt/"pseudo_fs"
			append/"$_pseudo_fs_mnt"/"pseudo_fs_name"
			getlistlength/"mount_fs"/"len"
			append/len/"pseudo_fs_arg"
			// Save pseudo fs lists
			listtobin/"pseudo_fs"/"$pseudo_fs"
			listtobin/"pseudo_fs_name"/"$pseudo_fs_name"
			listtobin/"pseudo_fs_arg"/"$pseudo_fs_arg"
		endif
		// Save mount lists
		listtobin/"mount_fs"/"$mount_fs"
		listtobin/"mount_pnt"/"$mount_pnt"
		listtobin/"mount_fsi"/"$mount_fsi"
		listtobin/"mount_md"/"$mount_md"
	endwarp
}
linkdef/"_umount_fs","umnt_fs","global"
{
	warp
		// _umount_fs/[path to filesystem or mount point]
		getitem/"arg_1",1/"mntpt"
		// Check permissions
		if/[whoami != "root"]
			set/"return_code","EPERM"
			exit
		endif
		// Translate to absolute path
		_fixpath/mntpt/"mntpt"
		// Test file/dir
		source/$tmp_lib_ftest/mntpt,"r","a"/"test"
		if/[return_code != ""]
			exit
		endif
		// Load mount lists
		bintolist/$mount_fs/"mount_fs"
		bintolist/$mount_pnt/"mount_pnt"
		bintolist/$mount_fsi/"mount_fsi"
		bintolist/$mount_md/"mount_md"
		// Get some info about this mounted fs
		getindex/"mount_fs",mntpt/"ix2"
		if/[ix2 == 0]
			getindex/"mount_pnt",mntpt/"ix2"
			if/[ix2 == 0]
				// fs isn't mounted
				set/"return_code","EINVAL"
				exit
			endif
		endif
		// TODO: Scan the filesystem recursively to find other mounted filesystems in it.
		// Or... maybe fixpath can be used to detect parent fs
		//
		// Load pseudo fs lists
		bintolist/$pseudo_fs/"pseudo_fs"
		bintolist/$pseudo_fs_name/"pseudo_fs_name"
		bintolist/$pseudo_fs_arg/"pseudo_fs_arg"
		// Get pseudo fs arg of this filesystem
		getindex/"pseudo_fs_arg",ix2/"ix"
		if/[ix == 0]
			// This is a pseudo fs or the root filesystem
			// It can't be unmounted
			set/"return_code","EBUSY"
			exit
		endif
		// Remove pseudo fs
		deleteitem/ix/"pseudo_fs"
		deleteitem/ix/"pseudo_fs_name"
		deleteitem/ix/"pseudo_fs_arg"
		// Remove mount
		getlistlength/"mount_fs"/"len"
		if/[ix2 == len]
			deleteitem/ix2/"mount_fs"
			deleteitem/ix2/"mount_pnt"
			deleteitem/ix2/"mount_fsi"
			deleteitem/ix2/"mount_md"
		else
			replace/ix2,""/"mount_fs"
			replace/ix2,""/"mount_pnt"
			replace/ix2,""/"mount_fsi"
			replace/ix2,""/"mount_md"
		endif
		// Save pseudo fs lists
		listtobin/"pseudo_fs"/"$pseudo_fs"
		listtobin/"pseudo_fs_name"/"$pseudo_fs_name"
		listtobin/"pseudo_fs_arg"/"$pseudo_fs_arg"
		// Save mount lists
		listtobin/"mount_fs"/"$mount_fs"
		listtobin/"mount_pnt"/"$mount_pnt"
		listtobin/"mount_fsi"/"$mount_fsi"
		listtobin/"mount_md"/"$mount_md"
	endwarp
}
linkdef/"_mount_init","mnt_init","global"
{
	warp
		// _mount_init
		// (no arguments)
		set/"$mount_fs",""/"$mount_pnt",""/"$mount_fsi",""
		set/"$mount_md",""
		set/"$_pseudo_fs_mnt","3;mnt"
	endwarp
}
